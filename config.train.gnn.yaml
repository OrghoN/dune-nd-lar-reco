iotool:
  batch_size: 32
  shuffle: False
  num_workers: 1
  collate_fn: CollateSparse
  sampler:
    name: RandomSequenceSampler
#    name: SequentialBatchSampler  # use if you want to overtrain on a fixed sample (also set the batch size to the full sample size)

  dataset:
    name: LArCVDataset
    # we're running out of memory.  for the moment, try excluding the 100 most energetic events...
    # skip: [48, 60, 67, 84, 85, 101, 123, 127, 131, 132, 135, 146, 194, 196, 210, 225, 242, 254, 258, 284, 306, 312, 315, 340, 345, 351, 357, 365, 376, 411, 442, 461, 471, 495, 497, 508, 526, 544, 597, 601, 609, 645, 667, 669, 677, 712, 719, 733, 751, 759, 761, 762, 770, 790, 819, 824, 830, 854, 889, 903, 911, 913, 918, 926, 944, 958, 1009, 1020, 1031, 1033, 1056, 1068, 1088, 1107, 1116, 1154, 1172, 1203, 1265, 1267, 1268, 1278, 1294, 1298, 1354, 1375, 1380, 1429, 1458, 1525, 1526, 1538, 1553, 1556, 1558, 1580, 1584, 1586, 1593, 1610]
#    event_list: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 128, 129, 130, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 760, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 914, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1266, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1295, 1296, 1297, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1376, 1377, 1378, 1379, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1554, 1555, 1557, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1581, 1582, 1583, 1585, 1587, 1588, 1589, 1590, 1591, 1592, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1611, 1612, 1613, 1614]"
    limit_num_files: 100
    schema:
      input_data:
        - parse_sparse3d_scn  # this parser takes one argument: the tree with EventSparseTensor3Ds
        - sparse3d_geant4     # this is the name of the tree
      segment_label:
        - parse_sparse3d_scn  # this parser takes one argument: the tree with particle labels
        - sparse3d_pcluster_semantics
      cluster_label:
        - parse_cluster3d_clean_full  # this parser takes three arguments: tree with ClusterVoxel3Ds, tree with LArCV particles, tree with EventSparseTensor3Ds
        - cluster3d_pcluster
        - particle_pcluster
        - sparse3d_pcluster_semantics
      particles_label:
        - parse_particle_points  # this parser takes two arguments: the tree with EventSparseTensor3Ds and the one with the LArCV particles
        - cluster3d_pcluster
        - particle_pcluster_corrected

model:
  # this is a misnomer (ghost hits not required), but that's what it's currently hooked up as
  name: full_chain
  modules:
    # this is the thing that drives all the rest...
    chain:
      enable_uresnet: True
      enable_ppn: True
      # note that currently DBScan is automatically enabled if any of the CNN or GNNs below is enabled
      enable_cnn_clust: False
      enable_gnn_shower: True
      use_ppn_in_gnn: True
      enable_gnn_track: True
      enable_gnn_inter: False
      enable_ghost: False

    # UResNet has lots of uses, but this one's configured for semantic segmentation on hits
    uresnet_ppn:
      uresnet_lonely:
        freeze_weights: True
        num_strides: 7    # (number of downsample layers) + 1
        filters: 16       # number of features generated at first layer, doubled (?) each layer
        num_classes: 5
        data_dim: 3
        spatial_size: 1920
        ghost: False      # artifacts from rebuilding 3D out of 2D views
        features: 1       # number of input features
        model_path: '/cluster/tufts/minos/jwolcott/data/dune/nd/nd-lar-reco/train/uresnet+ppn-380Kevs-50Kits-batch32/snapshot-49999.ckpt'  # load these pre-trained weights as starting point


      # "point of interest" network
      # (note: depends on UResNet image filters from uresnet_lonely above; don't run without)
      ppn:
        freeze_weights: True
        num_strides: 7   # needs to match UResNet.  (allows PPN to understand its input)
        filters: 16      # ditto
        num_classes: 5   # ditto
        data_dim: 3      # ditto
        downsample_ghost: False
        use_encoding: False
        ppn_num_conv: 1
        score_threshold: 0.5
        ppn1_size: 24
        ppn2_size: 96
        spatial_size: 1920
        model_path: '/cluster/tufts/minos/jwolcott/data/dune/nd/nd-lar-reco/train/uresnet+ppn-380Kevs-50Kits-batch32/snapshot-49999.ckpt'  # load these pre-trained weights as starting point

    # The clustering stack is composed of a couple of algorithms:
    # DBSCAN makes 'fragments' (groups of neighboring hits of the same semantic type) first.
    # the 'track-type' fragments are internally regrouped either
    #    (a) making a second pass at building fragments within each primary fragment after voxels near PPN fragments are masked out,
    #        then reassociating to this second set of fragments;
    # or (b) by constructing a graph of fragments and connecting those whose ends are within the DBSCAN grouping distance.
    dbscan_frag:
      dim: 3
      min_samples: 1
      num_classes: 4 # Ignores kShapeLEScatter, which is enum val 4
      eps: [1.999, 3.999, 1.999, 4.999]  # "cluster neighborhood size" parameter to DBSCAN algorithm.  one eps for each cluster type
#      min_size: [10,3,3,3]
      min_size: [3,3,3,3]
      cluster_classes: [0, 1, 2, 3] # run DBScan to cluster semantic hits of these types (type enum ShapeType_t from larcv)
#      cluster_classes: [0, 2, 3]
      track_label: 1   # needs to match larcv::kShapeTrack
      michel_label: 2  # needs to match larcv::kShapeMichel
      delta_label: 3   # needs to match larcv::kShapeDelta
      track_clustering_method: 'closest_path' # masked_dbscan, closest_path
      ppn_score_threshold: 0.9
      ppn_type_threshold: 1.999
      ppn_type_score_threshold: 0.5
      ppn_mask_radius: 5

    # Optionally, a GNN can also be used to connect the track-type fragments together.
    # (it's off by default; see the flag 'enable_gnn_tracks' above under 'chain')
    grappa_track:
#      model_path: '/gpfs/slac/staas/fs1/g/neutrino/ldomine/chain/new/weights_track_clustering1/snapshot-9999.ckpt'
#      model_name: 'track_gnn'
      base:
        node_type: 1
        node_min_size: 3
        add_start_point: True
        add_start_dir: True
        start_dir_max_dist: 5
      node_encoder:
        name: 'geo'
        use_numpy: False
      edge_encoder:
        name: 'geo'
        use_numpy: False
      gnn_model:
        name: meta
        edge_feats: 19
        node_feats: 28
        node_classes: 2
        edge_classes: 2
        node_output_feats: 64
        edge_output_feats: 64
        aggr: 'add'
        leakiness: 0.1
        num_mp: 3
    grappa_track_loss:
      edge_loss:
        name: channel
        high_purity: False
        source_col: 5
        target_col: 6

    # Then, once clusters are made then we can make particle candidates out of them:
    # DBScan fragments of "track" hits are taken to be tracks (see above),
    # and a GNN is used to group the "shower" DBScan fragments into showers.
    grappa_shower:
      base:
        node_type: 0
        node_min_size: 10
        add_start_point: True
        add_start_dir: True
        start_dir_max_dist: 5
      node_encoder:
        name: geo
        use_numpy: False
      edge_encoder:
        name: geo
        use_numpy: False
      gnn_model:
        name: meta
        edge_feats: 19
        node_feats: 28
        node_classes: 2
        edge_classes: 2
        node_output_feats: 64
        edge_output_feats: 64
        aggr: add
        leakiness: 0.1
        num_mp: 3
    grappa_shower_loss:
      node_loss:
        name: primary
        high_purity: True
        use_group_pred: True
        group_pred_alg: score
      edge_loss:
        name: channel
        source_col: 5
        target_col: 6
        high_purity: True

    # With particles in hand, we can assemble them into an "interaction" using another GNN.
    grappa_inter:
      base:
        node_type: -1
        node_min_size: -1
        source_col: 6
        target_col: 7
        use_dbscan: False
        network: complete
        edge_max_dist: -1
        edge_dist_metric: set
        edge_dist_numpy: False
        add_start_point: True
        add_start_dir: True
        start_dir_max_dist: 5
        start_dir_opt: False
        merge_batch: True
        merge_batch_size: 2
        merge_batch_mode: fluc
        shuffle_clusters: False
      node_encoder:
        name: geo
        use_numpy: False
        more_feats: True
      edge_encoder:
        name: geo
        use_numpy: False
      gnn_model:
        name: meta
        edge_feats: 19
        node_feats: 28
        node_classes: 5
        edge_classes: 2
        node_output_feats: 64
        edge_output_feats: 64
        aggr: add
        leakiness: 0.1
        num_mp: 3
    grappa_inter_loss:
      edge_loss:
        name: channel
        loss: CE
        source_col: 6
        target_col: 7
        reduction: sum
        balance_classes: False
        target: group
        high_purity: False

    # The whole chain's losses are considered together during the training.
    # The values here are to allow them to be weighted differently.
    full_chain_loss:
      segmentation_weight: 1.
      clustering_weight: 1.
      ppn_weight: 1.
      shower_gnn_weight: 1.
      particle_gnn_weight: 1.
      track_gnn_weight: 1.
      inter_gnn_weight: 1.
      kinematics_weight: 10.
      kinematics_p_weight: 1.
      kinematics_type_weight: 1.
      flow_weight: 10.
      cosmic_weight: 1.

  network_input:
    - input_data
#    - particles_label

  # note that these need to match the arguments to forward() for the model's Loss
  # (so, since 'ghost_chain' currently maps to GhostChain2, this means GhostChain2Loss.forward())
  loss_input:     # truth values for supervised learning.  (also from 'schema')
    - segment_label
    - particles_label
    - cluster_label

trainval:
  seed: 123
  # these are internally-produced
  concat_result: ['embeddings', 'seediness', 'margins',
                  'total_num_points', 'total_nonghost_points',
                  'fragments', 'fragments_seg',
                  'clust_fragments', 'clust_frag_seg',
                  'shower_fragments', 'shower_edge_index', 'shower_edge_pred', 'shower_node_pred','shower_group_pred',
                  'track_fragments', 'track_edge_index', 'track_node_pred', 'track_edge_pred', 'track_group_pred',
                  'particles', 'particle_fragments', 'particle_edge_index', 'particle_node_pred', 'particle_edge_pred', 'particle_group_pred',
                  'node_pred_p', 'node_pred_type', 'node_pred_vtx',
                  'flow_edge_pred',
                  'interactions', 'inter_cosmic_pred', 'inter_edge_index', 'inter_edge_pred',
                  'kinematics_particles', 'kinematics_edge_index',
                  "event_base"]
  learning_rate: 0.001
  unwrapper: unwrap_3d_scn
  weight_prefix: snapshot
  iterations: 5000
  report_step: 1
  checkpoint_step: 500
  log_dir: log_train
  train: True
  debug: False
  minibatch_size: -1
  optimizer:
    name: Adam
    args:
      lr: 0.001

